{
    parserClass='pl0ideaplugin.PascalParser'

    extends = 'com.intellij.extapi.psi.ASTWrapperPsiElement'

    psiClassPrefix='Pascal'
    psiImplClassSuffix='Impl'
    psiPackage='pl0ideaplugin.psi'
    psiImplPackage='pl0ideaplugin.psi.impl'

    elementTypeHolderClass='pl0ideaplugin.psi.PascalTypes'
    elementTypeClass='pl0ideaplugin.psi.PascalElementType'
    tokenTypeClass='pl0ideaplugin.psi.PascalTokenType'
}

{
  tokens=[
    number='regexp:\d+(\.\d*)?'
    ident='regexp:\p{Alpha}\w*'
  ]

  name(".*expr")='expression'
  extends(".*expr")=expr
}

program
    ::= block "."

block
    ::= 'const' ident '=' number (',' ident ' = ' number) * ';'
    | 'var' ident (',' ident) * ';'
    | ('procedure' ident ';' block ';') * statement

statement
    ::= ident ':=' expression
    | ident ':=' 'call' ident
    | '?' ident
    | '!' expression
    | 'begin' statement (';' statement) * 'end'
    | 'if' condition 'do' statement
    | 'while' condition 'do' statement

condition
    ::='odd' expression
    | expression ('=' | '#' | '<' | '<=' | '>' | '>=') expression

expression
    ::= ('+' | '-') term [('+' | '-') term ]

term
    ::= factor [ ('*' | '/') factor ]

factor
    ::= ident | number | '(' expression ')'
