{
  parserClass='pl0ideaplugin.PascalParser'

  extends='com.intellij.extapi.psi.ASTWrapperPsiElement'

  psiClassPrefix='Pascal'
  psiImplClassSuffix='Impl'
  psiPackage='pl0ideaplugin.psi'
  psiImplPackage='pl0ideaplugin.psi.impl'

  elementTypeHolderClass='pl0ideaplugin.psi.PascalTypes'
  elementTypeClass='pl0ideaplugin.psi.PascalElementType'
  tokenTypeClass='pl0ideaplugin.psi.PascalTokenType'

  tokens=[
    space = "regexp:\s+"
    const="const"
    var="var"
    procedure="procedure"
    call = "call"
    begin = "begin"
    end = "end"
    while = "while"
    do = "do"
    if = "if"
    then = "then"
    odd = "odd"
    number="regexp:\d+"
    id="regexp:[a-z]([a-z0-9])*"
    equaling=":="

    plus='+'
    minus='-'
    product='*'
    delim='/'

    less='<'
    lesseq='<='
    greater='>'
    greatereq='>='

    comma=','
    semicol=';'
    dot='.'
  ]
}

program
    ::= block dot

block
    ::= [const id '=' number ( ',' id '=' number ) * semicol]
        [var id (',' id) * ';']
        [(procedure id semicol block semicol)*]
        statement

statement
    ::= id equaling expression
    | call id
    | '?' id
    | '!' expression
    | begin statement (semicol statement ) * end
    | if condition then statement
    | while condition do statement

condition
    ::= odd expression
    | expression ('=' | '#' | lesseq | less | greatereq | greater) expression

expression
    ::= (plus | minus)? term [ ((plus | minus) term)* ]

term
    ::= factor [ ((product | delim) factor)* ]

factor
    ::= id | number | '(' expression ')'
