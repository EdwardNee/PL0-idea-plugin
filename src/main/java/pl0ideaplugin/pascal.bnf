{
  parserClass='pl0ideaplugin.PascalParser'

  extends='com.intellij.extapi.psi.ASTWrapperPsiElement'

  psiClassPrefix='Pascal'
  psiImplClassSuffix='Impl'
  psiPackage='pl0ideaplugin.psi'
  psiImplPackage='pl0ideaplugin.psi.impl'

  elementTypeHolderClass='pl0ideaplugin.psi.PascalTypes'
  elementTypeClass='pl0ideaplugin.psi.PascalElementType'
  tokenTypeClass='pl0ideaplugin.psi.PascalTokenType'

  tokens=[
    space = "regexp:\s+"
    const="const"
    var="var"
    procedure="procedure"
    call = "call"
    begin = "begin"
    end = "end"
    while = "while"
    do = "do"
    if = "if"
    then = "then"
    odd = "odd"
    number="regexp:\d+"
    id="regexp:[a-z]([a-z0-9])*"
  ]
}

program
    ::= block '.'

block
    ::= [const id '=' number ( ',' id '=' number ) * ';']
        [var id (',' id) * ';']
        [(procedure id ';' block ';')*]
        statement

statement
    ::= id ':=' expression
    | call id
    | '?' id
    | '!' expression
    | begin statement (';' statement ) * end
    | if condition then statement
    | while condition do statement

condition
    ::= odd expression
    | expression ('=' | '#' | '<=' | '<' | '>=' | '>') expression

expression
    ::= ('+' | '-')? term [ (('+' | '-') term)* ]

term
    ::= factor [ (('*' | '/') factor)* ]

factor
    ::= id | number | '(' expression ')'
